/**
 * –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—å —Å–∏–º–º–µ—Ç—Ä–∏–∏
–î–∞–Ω –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ —Å —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (x, y). 
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è, –¥–µ–ª—è—â–∞—è —Ç–æ—á–∫–∏ –Ω–∞ 2 –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–π –ø—Ä—è–º–æ–π.
–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞—ë—Ç—Å—è –º–∞—Å—Å–∏–≤ –∏–∑ —Ç–æ—á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [x, y]: [[0, 0], [1, 1], ...]. 
–ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É 'points must be array'.
–ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ç–∞–∫–∞—è –ø—Ä—è–º–∞—è –µ—Å—Ç—å. 
–¢–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å true, –µ—Å–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
 */

/**
 * @param {([number, number])[]} points
 * @returns {boolean}
 */
function isSym(points) {
  if (!Array.isArray(points)) throw new Error('points must be array')

  if (points.length < 2) return true

  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è x
  const x = points.reduce((res, [px, _] ) => (res + px), 0) / points.length
  console.log("üöÄ ~ x:", x)

  // –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ y
  const hash = new Map() // 'dx..dy' to 0: count

  for(let i = 0; i < points.length; i++) {
    const [px, py] = points[i]

    if (px === x) continue

    const dy = py - 0
    const dx = px - x

    const currP = `${dx}..${dy}`
    const oppP = `${-dx}..${dy}`

    if (hash.get(oppP)) {
      hash.set(oppP, hash.get(oppP) - 1)
    } else {
      hash.set(currP, (hash.get(currP) || 0) + 1)
    }

  }
  return ![...hash.values()].filter(count => count !== 0).length
}

// ('asdasd') error
console.log(isSym([[]])) // true
console.log(isSym([[1,1]])) // true
console.log(isSym([[1,1], [-1, 1]])) // true
console.log(isSym([[1,1], [-1, 2]])) // false
console.log(isSym([[2,2],[1,1], [3, 1]])) // false